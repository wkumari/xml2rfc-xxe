/*
 * css to allow WYSIKLWYG editing of xml2rfc format
 * using XMLmind XML editor.
 *
 * $Id$
 */

* {
	display: block;
}

/*
 * Need to write a gadget
 * XXX Also need to figure out how to render the processing-instructions
 * that come before the <rfc>
*::processing-instruction(rfc) {
	content: "rfc:include " attr(include);
}
 */

/* Headings for major sections of the document. */
rfc:before,
rfc > front:before,
rfc > middle:before,
rfc > back:before {
	display: block;
	font-size: 120%;
	font-weight: bold;
	text-align: center;
	background-color: #ff9900;
}
rfc,
rfc > front,
rfc > middle,
rfc > back {
	border: 2 solid #ff9900;
	margin: 0 0 2 0;
}
rfc::attribute() {
	attribute-content-left: "[" attribute-label() ":";
	attribute-content-middle: value-editor(attribute, attribute());
	attribute-content-right: "] ";
	font-size: 80%;
}
rfc::attribute(category),
rfc::attribute(ipr) {
	show-attribute: always;
}
rfc:before {
	/* to do:
	     write java function to handle node-set of processing
	     instructions, return something that renders nicely here.
	     Unfortunately, xxe is designed to edit documents starting
             at the root node, so we can't edit these processing
             instructions. */
	content: xpath("if(/processing-instruction('rfc'), '[contains unparsed processing instructions] ', '')") "RFC metadata: " attributes();
}
rfc > front:before {
	content: "RFC Front Matter";
}
rfc > middle:before {
	content: "RFC Middle Matter";
}
rfc > back:before {
	content: "RFC Back Matter";
}
rfc > front title {
	font-size: 150%;
	text-align: center;
}

/* Front abstract */
rfc > front abstract:before {
	display: block;
	content: "Abstract";
	font-size: 120%;
	font-weight: bold;
	text-align: center;
}
abstract,note {
	margin: 0.6em 2em;
}

note:before {
	display: block;
	content: "Note: " text-field(attribute, title);
	font-size: 120%;
	font-weight: bold;
	text-align: center;
}

/* Author and address formatting */
address:before {
	content: "Address: ";
	text-indent: -1em;
}
address {
	margin-left: 1em;
}
address postal {
	margin-left: 1em;
}
address phone:before {
	content: "Telephone: ";
}
address facsimile:before {
	content: "Facsimile: ";
}
address email:before {
	content: "Email: ";
}
address uri:before {
	content: "URI: ";
}
/* Collapse author details by default */
author {
	collapsible: yes;
	collapsed: yes;
	not-collapsible-head: 1;
}
author::attribute(role) {
	attribute-content-left: "[role:";
	attribute-content-middle: value-editor(attribute, attribute());
	attribute-content-right: "] ";
}
/* Should these be inline attributes too? */
author:before {
	content: collapser() "Author: " attr(fullname) " (" attr(initials) " " attr(surname) ")" attributes();
}
organization:before {
	content: "Organization: ";
}
organization[abbrev]:after {
	content: " (aka " attr(abbrev) ")";
}
area:before {
	content: "Area: ";
}
workgroup:before {
	content: "Working Group: ";
}
keyword:before {
	content: "Keyword: ";
}
date:before {
	content: "Date: ";
}
date {
	content: attr(day) " " attr(month) " " attr(year);
}
/* make all anchors editable if present */
*::attribute(anchor) {
	attribute-content-left: "[a:";
	attribute-content-middle: text-field(attribute, anchor, columns, 10);
	attribute-content-right: "] ";
	show-attribute: when-added;
	color: purple;
	font-size: 80%;
}
section {
	collapsible: yes;
	not-collapsible-head: 1;
	margin: 0.33em 1em;
}
section::attribute(toc) {
	attribute-content-left: "[toc:";
	attribute-content-middle: value-editor(attribute, attribute());
	attribute-content-right: "] ";
	color: #ff9900;
	font-size: 80%;
}
/* Handle 4-level-embedded sections; anything beyond 4 will be numbered
 * incorrectly.  Too bad "counters" doesn't work. */
section:before {
	content: collapser() attributes() "Section " counter(n) ". " text-field(attribute, title);
	font-size: 125%;
}
section section:before {
	content: collapser() attributes() "Section " counter(nn) ". " text-field(attribute, title);
}
section section section:before {
	content: collapser() attributes() "Section " counter(nnn) ". " text-field(attribute, title);
}
section section section section:before {
	content: collapser() attributes() "Section " counter(nnnn) ". " text-field(attribute, title);
}
/*
 * Don't know how to do letter.number numbering, so we do
 * letter on major sections and number.number on subsections.
 * Confusing.
 */
back section:before {
	content: collapser() attributes() "Appendix " counter(n, upper-alpha) ". " text-field(attribute, title);
	font-size: 125%;
}
back section section:before {
	content: collapser() attributes() "Appendix " counter(nn, decimal) ". " text-field(attribute, title);
}
back section section section:before {
	content: collapser() attributes() "Appendix " counter(nnn, decimal) ". " text-field(attribute, title);
}
back section section section section:before {
	content: collapser() attributes() "Appendix " counter(nnnn, decimal) ". " text-field(attribute, title);
}
t {
	margin-bottom: 1em;
}
title[abbrev]:after {
	content: " (aka " text-field(attribute, abbrev) ")";
}
xref, eref {
	display: inline;
	color: green;
}
xref::attribute(target) {
	attribute-content-left: " [xref to:";
	attribute-content-middle: value-editor(attribute, attribute());
	attribute-content-right: "]";
	show-attribute: always;
	color: purple;
	font-size: 80%;
}
/*
 * xpath stuff for xrefs:
 * - Find the node whose anchor is our target.
 * - If there's a title (a section or an appendix or ...?), render it.
 * - If there's a front/title (a reference), render that.
 * - If the node exists, render "ok".
 * - Else, render "(not found)".
 */
xref:after {
	display: inline;
	content: attributes() " [" xpath("if(//*[@anchor=current()/@target]/@title, //*[@anchor=current()/@target]/@title, if(//*[@anchor=current()/@target]/front/title, //*[@anchor=current()/@target]/front/title, if(//*[@anchor=current()/@target], 'ok', '(not found)')))") "] ";
	color: purple;
}
eref::attribute(target) {
	/* todo: combine this with xref::attribute(target)? */
	attribute-content-left: " [eref to:";
	attribute-content-middle: value-editor(attribute, attribute());
	attribute-content-right: "]";
	show-attribute: always;
	color: purple;
	font-size: 80%;
}
eref:after {
	display: inline;
	content: attributes() " ";
	color: purple;
}
/*
 * Make all attributes of iref editable inline.
 * Dunno if this is a good plan or not.
 */
iref::attribute() {
	attribute-content-left: "[" attribute-label() ":";
	attribute-content-middle: value-editor(attribute, attribute());
	attribute-content-right: "] ";
	show-attribute: always;
	color: purple;
	font-size: 80%;
}
iref {
	display: inline;
	content: " Index item: " attributes() " ";
	color: purple;
}
/*
 * I tried making cref collapsible, but it ended up collapsing the
 * whole section it was included inside.
 */
cref::attribute() {
	attribute-content-left: "[" attribute-label() ":";
	attribute-content-middle: value-editor(attribute, attribute());
	attribute-content-right: "]";
	color: purple;
	font-size: 80%;
}
cref:before {
	content: "[[ comment" attributes() ": ";
}
cref {
	font-size: 80%;
	background-color: #8ed6ea;
}
cref:after {
	content: " ]]";
}
vspace {
	display: block;
	content: "vspace(" attr(blankLines) ")";
	background-color: purple;
	color: white;
}
spanx {
	display: inline;
	font-style: italic;
}
spanx[style=emph] {
	display: inline;
	font-style: italic;
}
spanx[style=strong] {
	display: inline;
	font-weight: bold;
	font-style: normal;
}
spanx[style=verb] {
	display: inline;
	font-family: monospace;
	font-style: normal;
}
/* A handle for the list */
list:before {
	content: icon(right) "[list type " attr(style) "]";
	font-size: 80%;
	color: #ff9900;
}
list t {
	margin: 0.33em 2em;
}
/* 3 levels of symbols */
list[style=symbols] > t:before {
	display: marker;
	content: disc;
}
list[style=symbols] list[style=symbols] > t:before {
	content: square;
}
list[style=symbols] list[style=symbols] list[style=symbols] > t:before {
	content: icon(diamond);
}
/* hanging lists */
/* XXX marker renders only in the margin, can't decide how to fit. */
list[style=hanging] > t {
	/* hangIndent? */
	margin-left: 6em;
}
list[style=hanging] > t:before {
	display: marker;
	content: attr(hangText) " ";
}
list[style=numbers] > t:before {
	display: marker;
	content: counter(n) ".";
}
list[style=letters] > t:before {
	display: marker;
	content: counter(n, lower-alpha) ".";
}
/* to do: java to support style=format */
list[style^=format] > t:before {
	display: marker;
	content: "???";
	color: red;
}

/* A handle for a figure */
figure:before {
	content: collapser() "[figure" attributes() "]";
	color: #ff9900;
}
figure::attribute(title) {
	attribute-content-left: "[title:";
	attribute-content-middle: value-editor(attribute, attribute());
	attribute-content-right: "] ";
	color: black;
}
figure {
	collapsible: yes;
	collapsed: no;
	not-collapsible-head: 1;
}
/* name? type? */
figure artwork {
	display: block;
	white-space: pre;
	font-family: monospace;
	/* can we display a vertical line at 70 characters? */
}

back > references:before {
	display: block;
	content: xpath("if(@title, @title, 'References')");
	font-size: 125%;
}
references > reference:before {
	content: collapser() "Reference " attributes();
}
/* Don't display abstracts in references */
reference abstract {
	display: none
}
reference seriesInfo {
	content: "Series: " attr(name) " Doc: " attr(value);
}
/* maybe editable inline? */
reference format {
	content: "Format " attr(type);
}
reference title:before {
	content: "Title: ";
}
reference annotation:before {
	content: "Annotation: ";
}
reference {
	display: block;
	collapsible: yes;
	collapsed: yes;
	not-collapsible-head: 1;
}
/*
 * texttable problems:
 * preamble and postamble need to be outside "display: table"
 * <ttcol> and <c> need to be virtually inside table-rows
 * <ttcol> contains the alignment for all of the <c>s
 */
texttable:before {
	content: "texttable not supported";
	color: red;
}
texttable {
	display: table;
	border: 1 solid black;
	padding: 2;
	border-spacing: 2;
	background-color: silver;
}
texttable > preamble {
	display: table-caption;
}
texttable > postamble {
	display: block;	/* table-caption displays at the top =( */
}
texttable > ttcol {
	display: table-cell;
	font-weight: bold;
	color: olive;
}
texttable > c {
	display: table-cell;
}
/*
 to do:
 texttable
  (can we do the "every count(ttcol) c's is a row" thing?)
  (probably needs java help)
 top-level <?rfc processing instructions
 <?rfc include= -- editable attribute
 list: can we inherit style from the closest parent as specified?
 additional validation: can we enforce things like the structure
  of the postal?
*/
