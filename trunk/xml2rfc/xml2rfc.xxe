<?xml version="1.0" encoding="UTF-8"?>
<configuration name="xml2rfc"
               xmlns="http://www.xmlmind.com/xmleditor/schema/configuration"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xmlns:xs="http://www.w3.org/2001/XMLSchema"
               xmlns:cfg="http://www.xmlmind.com/xmleditor/schema/configuration">
  <help location="xml2rfc_help.jar"/>

  <!-- Claim an XML document if:
       - it has a DOCTYPE referring to the rfc2629.dtd or the website version
       - it has a DOCTYPE referring to the public ID -//IETF//DTD RFC 2629
       - its root element is <rfc> with no namespace
       - its root element is <reference> with no namespace
         (this is for editing the include files directly)
       - its root element is <section> with no namespace
         (this is for editing a multi-file document directly)
  -->

  <detect>
    <or>
      <dtdSystemId>rfc2629.dtd</dtdSystemId>

      <dtdSystemId>http://xml.resource.org/authoring/rfc2629.dtd</dtdSystemId>

      <dtdPublicId substring="true">-//IETF//DTD RFC 2629</dtdPublicId>

      <and>
        <rootElementLocalName>rfc</rootElementLocalName>

        <rootElementNamespace xsi:nil="true"/>
      </and>

      <and>
        <rootElementLocalName>reference</rootElementLocalName>

        <rootElementNamespace xsi:nil="true"/>
      </and>

      <and>
        <rootElementLocalName>section</rootElementLocalName>

        <rootElementNamespace xsi:nil="true"/>
      </and>
    </or>
  </detect>

  <dtd systemId="dtd/rfc2629.dtd"/>

  <css location="css/xml2rfc.css" name="xml2rfc"/>

  <css alternate="true" location="css/structure.css" name="Document structure"/>

  <!-- make sure that artwork is saved as CDATA.
       Also, since xml2rfc pre-1.29 doesn't support UTF-8, make sure
       that the file is saved in US-ASCII with non-ASCII characters
       entity-encoded. -->

  <saveOptions cdataSectionElements="artwork" encoding="US-ASCII"/>

  <!-- make sure that artwork is loaded with space preserved -->

  <preserveSpace elements="artwork"/>

  <!-- figure/@src and artwork/@src point to embedded images -->

  <documentResources>
    <resource path="//figure/@src"/>

    <resource path="//artwork/@src"/>
  </documentResources>

  <!-- Template blank documents adapted from xml2rfc distribution's
       contrib/fred.baker/new-draft.xml -->

  <template location="empty-draft.xml" name="Empty Internet-Draft"/>

  <template location="new-draft.xml" name="Baker Sample Internet-Draft"/>

  <!-- Bindings =========================================================== -->

  <!-- (initially copied from xhtml) -->

  <!-- Inside a t, attempt to behave like a word-processor. -->

  <binding>
    <keyPressed code="ENTER"/>

    <command name="xml2rfc.splitOrInsertNewLine"/>
  </binding>

  <binding>
    <keyPressed code="ENTER" modifiers="shift"/>

    <command name="xml2rfc.insertSectionSameLevel"/>
  </binding>

  <binding>
    <keyPressed code="DELETE"/>

    <command name="xml2rfc.joinOrDeleteChar"/>
  </binding>

  <binding>
    <keyPressed code="BACK_SPACE"/>

    <command name="xml2rfc.joinOrDeleteChar" parameter="backwards"/>
  </binding>

  <binding>
    <keyPressed code="DOWN" modifiers="ctrl shift meta"/>

    <command name="selectNode" parameter="extendToNextSiblingOrElement"/>
  </binding>

  <binding>
    <keyPressed code="UP" modifiers="ctrl shift meta"/>

    <command name="selectNode" parameter="extendToPreviousSiblingOrElement"/>
  </binding>

  <binding>
    <keyPressed code="EQUALS" modifiers="shift meta"/>

    <command name="xml2rfc.incrSectionLevel"/>
  </binding>

  <binding>
    <keyPressed code="EQUALS" modifiers="meta"/>

    <command name="xml2rfc.incrSectionLevel"/>
  </binding>

  <binding>
    <keyPressed code="MINUS" modifiers="meta"/>

    <command name="xml2rfc.decrSectionLevel"/>
  </binding>

  <command name="xml2rfc.splitOrInsertNewLine">
    <macro>
      <choice>
        <command name="insertControlChar" parameter="\n"/>

        <sequence>
          <command name="selectNode"
                   parameter="ancestorOrSelf[implicitElement] t"/>

          <command name="split"/>
        </sequence>
      </choice>
    </macro>
  </command>

  <!--TO DO: if there are any nodes following the selected ones, cut them
 too and put them in their own new section. Otherwise, the new section
 (after the parent) is after all the following text too, not quite
 what you might have expected.

TO DO: work when there are multiple sections selected-->

  <command name="xml2rfc.decrSectionLevel">
    <macro undoable="true">
      <sequence>
        <!-- Can I run: does my enclosing section (or myself) have
             a parent? -->

        <test expression="$implicitElement/ancestor-or-self::section[position()=1]/parent::section[position()=1]"/>

        <!-- select the section containing the cursor -->

        <command name="selectNode"
                 parameter="ancestorOrSelf[implicitElement] section"/>

        <!-- Remember where the parent section is -->

        <set expression="$selected/parent::section" variable="anchor"/>

        <!-- cut the original section -->

        <command name="cut"/>

        <!-- select the original parent section -->

        <set expression="$anchor" variable="selected"/>

        <!-- paste the old section after -->

        <command name="paste" parameter="after"/>
      </sequence>
    </macro>
  </command>

  <!-- to do: if I'm the last child, insert an empty section above me?

to do: work if there is more than one section selected-->

  <command name="xml2rfc.incrSectionLevel">
    <macro undoable="true">
      <sequence>
        <!-- Call "currentsection" either me (if I'm a section) or my
              first ancestor section.
             That's the first ./ancestor-or-self bit.
             Permission to run: currentsection has a preceding sibling
              section.
-->

        <test expression="$implicitElement/ancestor-or-self::section[position()=1]/preceding-sibling::section[position()=1]"/>

        <!-- select the section containing the cursor -->

        <command name="selectNode"
                 parameter="ancestorOrSelf[implicitElement] section"/>

        <!-- find the previous sibling's last section (or content element)
     either we want //section[position()=last()] or if
     there is no section child, we want //*[position()=last()]
     I feel like this choice is a hack, to try the second pattern
     if the first one failed. -->

        <set context="$selected"
             expression="preceding-sibling::section[position()=1]//section[position()=last()]"
             variable="anchor"/>

        <choice>
          <sequence>
            <test expression="not($anchor)"/>

            <set context="$selected"
                 expression="preceding-sibling::section[position()=1]/*[position()=last()]"
                 variable="anchor"/>
          </sequence>

          <test expression="1"/>
        </choice>

        <!-- fail if this got no result -->

        <test expression="$anchor"/>

        <!-- cut it -->

        <command name="cut"/>

        <!-- select the previos sibling's last section -->

        <set expression="$anchor" variable="selected"/>

        <!-- paste it -->

        <command name="paste" parameter="after"/>
      </sequence>
    </macro>
  </command>

  <command name="xml2rfc.convertToList">
    <macro undoable="true">
      <sequence>
        <match context="$selected" pattern="t"/>

        <!-- cut the selected elements -->

        <command name="cut"/>

        <!-- insert a new list element where the elements were removed from -->

        <command name="insert" parameter="into list"/>

        <!-- select the implicitly created t item inside the list -->

        <command name="selectNode" parameter="firstChild"/>

        <!-- replace it with what was selected -->

        <command name="paste" parameter="to"/>
      </sequence>
    </macro>
  </command>

  <!-- todo: is it possible to make this executable only if the insert
       would succeed? -->

  <command name="xml2rfc.insertinside">
    <macro trace="true">
      <sequence>
        <choice>
          <sequence>
            <test expression="&quot;%1&quot; = &quot;before&quot;"/>

            <set expression="$selectedElement/child::%2[position()=1]"
                 variable="selectedElement"/>
          </sequence>

          <set expression="$selectedElement/child::%2[position()=last()]"
               variable="selectedElement"/>
        </choice>

        <command name="insert" parameter="%1 %0"/>
      </sequence>
    </macro>
  </command>

  <command name="xml2rfc.joinOrDeleteChar">
    <macro>
      <choice>
        <sequence>
          <test expression="$dot/ancestor::t and not($selected) and not($mark)"/>

          <command name="deleteSelectionOrJoinOrDeleteChar" parameter="%0"/>
        </sequence>

        <command name="deleteSelectionOrDeleteChar" parameter="%0"/>
      </choice>
    </macro>
  </command>

  <command name="xml2rfc.insertSectionSameLevel">
    <macro undoable="true">
      <sequence>
        <!-- 1. select parent section -->

        <command name="selectNode"
                 parameter="ancestorOrSelf[implicitElement] section"/>

        <!-- 2. insertAfter section -->

        <command name="insert" parameter="after section"/>
      </sequence>
    </macro>
  </command>

  <!-- easy way to insert same element -->

  <binding>
    <keyPressed code="ENTER" modifiers="mod"/>

    <command name="xml2rfc.appendSame"/>
  </binding>

  <binding>
    <keyPressed code="ENTER" modifiers="mod shift"/>

    <command name="xml2rfc.prependSame"/>
  </binding>

  <command name="xml2rfc.appendSame">
    <macro>
      <sequence>
        <command name="selectNode" parameter="selfOrElement"/>

        <command name="insertNode" parameter="sameElementAfter"/>
      </sequence>
    </macro>
  </command>

  <command name="xml2rfc.prependSame">
    <macro>
      <sequence>
        <command name="selectNode" parameter="selfOrElement"/>

        <command name="insertNode" parameter="sameElementBefore"/>
      </sequence>
    </macro>
  </command>

  <!-- totally random binding -->

  <binding>
    <keyPressed code="F6"/>

    <command name="xml2rfc.addRFCInclude"/>
  </binding>

  <command name="xml2rfc.addRFCInclude">
    <macro undoable="true">
      <sequence>
        <choice>
          <!-- If we've got a references section selected, then either:
	       - it's empty, so we can insert piInto
	       - it's got content, so we can select the last element
	         and insert after. -->

          <sequence>
            <test context="$implicitNode" expression="self::references"/>

            <choice>
              <command name="insertNode" parameter="piInto rfc"/>

              <sequence>
                <command name="selectNode" parameter="lastChild"/>

                <command name="insertNode"
                         parameter="piAfter[implicitNode] rfc"/>
              </sequence>
            </choice>
          </sequence>

          <command name="insertNode" parameter="piAfter[implicitNode] rfc"/>
        </choice>

        <command name="insertString" parameter="include='reference.'"/>

        <!-- assuming the newly inserted element is selected -->

        <set expression="19" variable="dotOffset"/>
      </sequence>
    </macro>
  </command>

  <!-- Menu ============================================================== -->

  <!--
       Preview using xml2html using a process.
    -->

  <!-- XXX no longer used -->

  <command name="xml2rfc.preview">
    <process>
      <!-- US-ASCII because xml2rfc pre-1.29 doesn't support UTF-8, but does
           support entity-encoded characters -->

      <copyDocument encoding="US-ASCII" to="__doc.xml"/>

      <shell command="xml2html __doc.xml preview.html"/>

      <delete files="__doc.xml"/>

      <shell command="open preview.html" platform="Mac"/>

      <shell command="start &quot;&quot; preview.html" platform="Windows"/>

      <!-- the call to mozilla needs work (this might be the advantage
           of the Preview java class) -->

      <shell command="mozilla -remote &quot;openFile(file://`pwd`/preview.html)&quot; &gt;/dev/null 2&gt;&amp;1"
             platform="GenericUnix"/>

      <!-- sleep to delay the deletion until the app can launch -->

      <shell command="sleep 10" platform="Unix"/>

      <!-- the only way I can figure out how to pause on Windows :-( -->

      <shell command="echo forgive this horrible hack" platform="Windows"/>

      <shell command="ping -n 10 127.0.0.1 &gt; NUL:" platform="Windows"/>
    </process>
  </command>

  <!--
       Return the docName if present, otherwise the string "draft",
       for naming the results of a "Convert...".
    -->

  <command name="xml2rfc.draftname">
    <macro>
      <sequence>
        <get expression="if(/rfc/@docName,/rfc/@docName,'draft')"/>
      </sequence>
    </macro>
  </command>

  <!--
       Use xml2rfc to convert document to text or html.
    -->

  <!-- XXX no longer used. -->

  <command name="xml2rfc.convertDoc">
    <process>
      <!-- US-ASCII because xml2rfc pre-1.29 doesn't support UTF-8, but does
           support entity-encoded characters -->

      <copyDocument encoding="US-ASCII" to="__doc.xml"/>

      <shell command="xml2%1 __doc.xml draft.%2"/>

      <delete files="__doc.xml"/>

      <upload base="file:///">
        <!-- we always get a fully-qualified %0 -->

        <copyFile file="draft.%2" to="%0"/>
      </upload>
    </process>
  </command>

  <!--
       Preview as .txt.  This is almost like convert.
    -->

  <!-- XXX no longer used -->

  <command name="xml2rfc.previewTXT">
    <process>
      <!-- US-ASCII because xml2rfc pre-1.29 doesn't support UTF-8, but does
           support entity-encoded characters -->

      <copyDocument encoding="US-ASCII" to="__doc.xml"/>

      <shell command="xml2rfc __doc.xml preview.txt"/>

      <delete files="__doc.xml"/>

      <shell command="open preview.txt" platform="Mac"/>

      <shell command="start &quot;&quot; preview.txt" platform="Windows"/>

      <shell command="xterm -e &quot;less preview.txt&quot;"
             platform="GenericUnix"/>

      <!-- sleep to delay the deletion until the app can launch -->

      <shell command="sleep 10" platform="Unix"/>

      <!-- the only way I can figure out how to pause on Windows :-( -->

      <shell command="echo forgive this horrible hack" platform="Windows"/>

      <shell command="ping -n 10 127.0.0.1 &gt; NUL:" platform="Windows"/>
    </process>
  </command>

  <command name="xml2rfc.previewXSL">
    <process>
      <mkdir dir="resources"/>

      <mkdir dir="raw"/>

      <copyDocument to="__doc.xml">
        <resources copyTo="resources" match=".+\.(png|jpg|jpeg|gif)"/>

        <resources copyTo="raw" match="(?:.+/)?(.+)\.(\w+)"
                   referenceAs="resources/$1.png"/>

        <resources copyTo="resources" match=".+"/>
      </copyDocument>

      <convertImage format="png" from="raw" to="resources"/>

      <copyProcessResources resources="dtd/*.*" to="."/>

      <transform file="__doc.xml" stylesheet="xsl/expand-pi-rfc-include.xslt"
                 to="__doc2.xml"/>

      <transform file="__doc2.xml" stylesheet="xsl/rfc2629.xslt"
                 to="preview.html"/>

      <delete files="__doc.xml"/>

      <shell command="open preview.html" platform="Mac"/>

      <shell command="start &quot;&quot; preview.html" platform="Windows"/>

      <!-- the call to mozilla needs work (this might be the advantage
           of the Preview java class) -->

      <shell command="mozilla -remote &quot;openFile(file://`pwd`/preview.html)&quot; &gt;/dev/null 2&gt;&amp;1"
             platform="GenericUnix"/>

      <!-- sleep to delay the deletion until the app can launch -->

      <shell command="sleep 10" platform="Unix"/>

      <!-- the only way I can figure out how to pause on Windows :-( -->

      <shell command="echo forgive this horrible hack" platform="Windows"/>

      <shell command="ping -n 10 127.0.0.1 &gt; NUL:" platform="Windows"/>
    </process>
  </command>

  <!--
       Use Julian's xsl transform to convert document to HTML or
        PDF via FO.
        -->

  <command name="xml2rfc.toHTMLUsingXSL">
    <macro>
      <sequence>
        <command name="xml2rfc.draftname"/>

        <command name="selectFile" parameter="saveFileURL %p/%_.html"/>

        <command name="xml2rfc.doXSLtoHTML" parameter="%_"/>
      </sequence>
    </macro>
  </command>

  <command name="xml2rfc.toSomethingUsingXSLFO">
    <macro>
      <sequence>
        <command name="xml2rfc.draftname"/>

        <command name="selectFile" parameter="saveFileURL %p/%_.%0"/>

        <command name="xml2rfc.doXSLFOtoSomething" parameter="%_ %0"/>
      </sequence>
    </macro>
  </command>

  <command name="xml2rfc.checkIetfReferences">
    <process>
      <copyDocument to="__doc.xml"/>

      <copyProcessResources resources="dtd/*.*" to="."/>

      <transform file="__doc.xml" stylesheet="xsl/expand-pi-rfc-include.xslt"
                 to="__doc2.xml"/>

      <transform file="__doc2.xml" stylesheet="xsl/check-ietf-references.xslt"
                 to="reference-check.txt"/>

      <shell command="open reference-check.txt" platform="Mac"/>

      <shell command="start &quot;&quot; reference-check.txt"
             platform="Windows"/>

      <shell command="xterm -e &quot;less reference-check.txt&quot;"
             platform="GenericUnix"/>

      <!-- sleep to delay the deletion until the app can launch -->

      <shell command="sleep 10" platform="Unix"/>

      <!-- the only way I can figure out how to pause on Windows :-( -->

      <shell command="echo forgive this horrible hack" platform="Windows"/>

      <shell command="ping -n 10 127.0.0.1 &gt; NUL:" platform="Windows"/>
    </process>
  </command>

  <command name="xml2rfc.doXSLFOtoSomething">
    <process>
      <mkdir dir="resources"/>

      <mkdir dir="raw"/>

      <copyDocument to="__doc.xml">
        <resources copyTo="resources" match=".+\.(png|jpg|jpeg|gif)"/>

        <resources copyTo="raw" match="(?:.+/)?(.+)\.(\w+)"
                   referenceAs="resources/$1.png"/>

        <resources copyTo="resources" match=".+"/>
      </copyDocument>

      <convertImage format="png" from="raw" to="resources"/>

      <copyProcessResources resources="dtd/*.*" to="."/>

      <transform file="__doc.xml" stylesheet="xsl/expand-pi-rfc-include.xslt"
                 to="__doc2.xml"/>

      <transform file="__doc2.xml" stylesheet="xsl/rfc2629toFO.xslt"
                 to="__doc.fo"/>

      <transform file="__doc.fo" stylesheet="xsl/xsl11toXep.xslt"
                 to="__doc.xep"/>

      <transform file="__doc.fo" stylesheet="xsl/xsl11toFop.xslt"
                 to="__doc.fop"/>

      <processFO file="__doc.xep" processor="XEP" to="draft.%1">
        <parameter name="OUTPUT_FORMAT">%1</parameter>

        <parameter name="H4PS.LANGUAGE_LEVEL">2</parameter>

        <!-- If XEP plug-in has not been installed, try FOP plug-in. -->

        <processFO file="__doc.fop" processor="FOP" to="draft.%1">
          <parameter name="renderer">%1</parameter>
        </processFO>
      </processFO>

      <upload base="file:///">
        <!-- we always get a fully-qualified %0 -->

        <copyFile file="draft.%1" to="%0"/>
      </upload>
    </process>
  </command>

  <command name="xml2rfc.doXSLtoHTML">
    <process>
      <mkdir dir="resources"/>

      <mkdir dir="raw"/>

      <copyDocument to="__doc.xml">
        <resources copyTo="resources" match=".+\.(png|jpg|jpeg|gif)"/>

        <resources copyTo="raw" match="(?:.+/)?(.+)\.(\w+)"
                   referenceAs="resources/$1.png"/>

        <resources copyTo="resources" match=".+"/>
      </copyDocument>

      <convertImage format="png" from="raw" to="resources"/>

      <copyProcessResources resources="dtd/*.*" to="."/>

      <transform file="__doc.xml" stylesheet="xsl/expand-pi-rfc-include.xslt"
                 to="__doc2.xml"/>

      <transform file="__doc2.xml" stylesheet="xsl/rfc2629.xslt"
                 to="draft.html"/>

      <upload base="%0">
        <!-- we always get a fully-qualified %0 -->

        <copyFile file="draft.html" to="%0"/>

        <copyFiles files="resources/*" toDir="resources"/>
      </upload>
    </process>
  </command>

  <command name="xml2rfc.convertToSomething">
    <macro>
      <sequence>
        <command name="xml2rfc.draftname"/>

        <command name="selectFile" parameter="saveFileURL %p/%_.%1"/>

        <command name="xml2rfc.convertDoc" parameter="%_ %*"/>
      </sequence>
    </macro>
  </command>

  <!-- could have convertToSomething take an extra arg instead of
       nearly repeating the code here -->

  <command name="xml2rfc.convertToUnpg">
    <macro>
      <sequence>
        <command name="xml2rfc.draftname"/>

        <command name="selectFile" parameter="saveFileURL %p/%_.txt"/>

        <command name="xml2rfc.convertDoc" parameter="%_ rfc unpg"/>
      </sequence>
    </macro>
  </command>

  <command name="xml2rfc.webform">
    <class>com.att.research.fenner.xmleditapp.xml2rfc.WebForm</class>
  </command>

  <command name="xml2rfc.testformatter">
    <class>com.att.research.fenner.xmleditapp.xml2rfc.TestFormatter</class>
  </command>

  <command name="xml2rfc.runformatter">
    <class>com.att.research.fenner.xmleditapp.xml2rfc.RunFormatter</class>
  </command>

  <command name="xml2rfc.gettmpfile">
    <class>com.att.research.fenner.xmleditapp.xml2rfc.GetTmpFile</class>
  </command>

  <command name="xml2rfc.pickfile">
    <macro>
      <sequence>
        <choice>
          <sequence>
            <test expression="&quot;%0&quot; = &quot;unpg&quot;"/>

            <set expression="txt" plainString="true" variable="extension"/>
          </sequence>

          <set expression="%0" plainString="true" variable="extension"/>
        </choice>

        <command name="xml2rfc.draftname"/>

        <get expression="concat('%_', '.', $extension)"/>

        <command name="selectFile" parameter="saveFile %p/%_"/>
      </sequence>
    </macro>
  </command>

  <command name="xml2rfc.convertViaWebForm">
    <macro>
      <sequence>
        <command name="xml2rfc.pickfile" parameter="%0"/>

        <command name="xml2rfc.webform" parameter="'%D' %0 '%_'"/>

        <test expression="'%_' != ''"/>

        <command name="alert" parameter="Conversion Completed, output in %_"/>
      </sequence>
    </macro>
  </command>

  <command name="xml2rfc.convertViaFormatter">
    <macro>
      <sequence>
        <command name="xml2rfc.pickfile" parameter="%0"/>

        <command name="xml2rfc.runformatter" parameter="'%D' %0 '%_'"/>

        <set expression="%_" plainString="true" variable="result"/>

        <choice>
          <sequence>
            <test expression="$result != &quot;&quot;"/>

            <get expression="$result"/>

            <command name="alert" parameter="%_"/>
          </sequence>

          <command name="alert" parameter="Conversion Complete."/>
        </choice>
      </sequence>
    </macro>
  </command>

  <command name="xml2rfc.os">
    <class>com.att.research.fenner.xmleditapp.xml2rfc.Os</class>
  </command>

  <command name="xml2rfc.externalEdit">
    <macro>
      <sequence>
        <!-- This command is only executable if the file is local -->

        <test expression="'%D' != ''"/>

        <!-- to do: use the os return value to decide on a file that has the pick list -->

        <!-- (mostly for user modification convenience; we already need to do a per-OS startup method) -->

        <command name="XXE.save" parameter="[ifNeeded]"/>

        <choice>
          <sequence>
            <command name="xml2rfc.os" parameter="windows"/>

            <command name="pick" parameter="Application false Notepad XMLSpy"/>

            <command name="start"
                     parameter="start &quot;&quot; &quot;%_&quot; &quot;%D&quot;"/>
          </sequence>

          <sequence>
            <command name="xml2rfc.os" parameter="mac"/>

            <command name="pick"
                     parameter="Application false TextEdit TextWrangler BBEdit"/>

            <command name="start"
                     parameter="open -a &quot;%_&quot; &quot;%D&quot;"/>
          </sequence>

          <sequence>
            <command name="xml2rfc.os" parameter="genericunix"/>

            <command name="pick" parameter="Application false vi emacs"/>

            <command name="start" parameter="xterm -e &quot;'%_' '%D'&quot;"/>
          </sequence>
        </choice>

        <command name="alert"
                 parameter="Click OK when done editing and saved."/>

        <command name="XXE.open" parameter="[reopenIfNewer]"/>
      </sequence>
    </macro>
  </command>

  <command name="xml2rfc.previewViaFormatter">
    <macro>
      <sequence>
        <command name="xml2rfc.gettmpfile" parameter="%0"/>

        <set expression="%_" plainString="true" variable="tmpfile"/>

        <get expression="$tmpfile"/>

        <command name="xml2rfc.runformatter" parameter="'%D' %0 '%_'"/>

        <set expression="%_" plainString="true" variable="result"/>

        <!-- runformatter returns null when it fails -->

        <choice>
          <sequence>
            <test expression="$result != &quot;&quot;"/>

            <get expression="$result"/>

            <command name="alert" parameter="%_"/>
          </sequence>

          <sequence>
            <get expression="$tmpfile"/>

            <command name="viewHTML" parameter="%_"/>
          </sequence>
        </choice>
      </sequence>
    </macro>
  </command>

  <command name="xml2rfc.previewViaWebForm">
    <macro>
      <sequence>
        <command name="xml2rfc.webform" parameter="'%D' %0"/>

        <set expression="%_" plainString="true" variable="tmpfile"/>

        <!-- webform returns null when it fails -->

        <test expression="$tmpfile != ''"/>

        <get expression="$tmpfile"/>

        <command name="viewHTML" parameter="%_"/>
      </sequence>
    </macro>
  </command>

  <!-- copied from xxe documentation -->

  <command name="xml2rfc.insertAfterAsParagraphs">
    <macro>
      <sequence>
        <command name="makeParagraphs" parameter="[blocks] %0"/>

        <command name="paste" parameter="after[implicitElement] %_"/>
      </sequence>
    </macro>
  </command>

  <menu label="XML2RFC">
    <item command="xml2rfc.previewViaFormatter" label="HTML Preview"
          parameter="html"/>

    <item command="xml2rfc.previewViaFormatter" label="Text Preview"
          parameter="txt"/>

    <item command="xml2rfc.previewXSL" label="HTML Preview using XSL"/>

    <item command="xml2rfc.previewViaWebForm"
          label="Text Preview using xml.resource.org" parameter="txt"/>

    <item command="xml2rfc.previewViaWebForm"
          label="HTML Preview using xml.resource.org" parameter="html"/>

    <item command="xml2rfc.addRFCInclude"
          label="Insert &lt;?rfc include=''?&gt;"/>

    <item command="xml2rfc.externalEdit" label="Edit in..."/>

    <item command="xml2rfc.checkIetfReferences" label="Check IETF References"/>

    <item command="xml2rfc.insertAfterAsParagraphs"
          label="Paste as Paragraphs" parameter="t"/>

    <item command="xml2rfc.convertToList"
          label="Convert Selected Paragraphs to List"/>

    <menu label="Convert">
      <menu label="...using xml.resource.org">
        <item command="xml2rfc.convertViaWebForm" label="Convert to Text"
              parameter="txt"/>

        <item command="xml2rfc.convertViaWebForm" label="Convert to HTML"
              parameter="html"/>

        <item command="xml2rfc.convertViaWebForm" label="Convert to nroff"
              parameter="nr"/>

        <item command="xml2rfc.convertViaWebForm"
              label="Convert to &quot;canonical&quot; XML" parameter="xml"/>

        <item command="xml2rfc.convertViaWebForm"
              label="Convert to unpaginated text" parameter="unpg"/>
      </menu>

      <item command="xml2rfc.convertViaFormatter" label="Convert to Text"
            parameter="txt"/>

      <item command="xml2rfc.convertViaFormatter" label="Convert to HTML"
            parameter="html"/>

      <item command="xml2rfc.toHTMLUsingXSL" label="Convert to HTML using XSL"/>

      <item command="xml2rfc.toSomethingUsingXSLFO"
            label="Convert to PDF using XSL-FO" parameter="pdf"/>

      <item command="xml2rfc.convertViaFormatter"
            label="Convert to &quot;canonical&quot; XML" parameter="xml"/>

      <!-- FOP's txt mode doesn't really work... maybe it would with more tuning.
      <item command="xml2rfc.toSomethingUsingXSLFO" label="Convert to TXT using XSL-FO"
            parameter="txt"/>
-->

      <item command="xml2rfc.convertViaFormatter"
            label="Convert to unpaginated text" parameter="unpg"/>
    </menu>
  </menu>

  <!-- Toolbar ============================================================ -->

  <!-- helpers for toolbar -->

  <command name="xml2rfc.convert">
    <macro undoable="true">
      <sequence>
        <command name="convert" parameter="[implicitElement] %0"/>

        <command name="putAttribute" parameter="%1 %2"/>
      </sequence>
    </macro>
  </command>

  <command name="xml2rfc.insert">
    <macro undoable="true">
      <sequence>
        <command name="xml2rfc.addBlock" parameter="%0"/>

        <command name="putAttribute" parameter="%1 %2"/>
      </sequence>
    </macro>
  </command>

  <command name="xml2rfc.addBlock">
    <macro>
      <choice>
        <command name="insert" parameter="into %0"/>

        <command name="insert" parameter="after[implicitElement] %0"/>
      </choice>
    </macro>
  </command>

  <toolBar>
    <button icon="icons/itemizedlist.gif" toolTip="Add itemized list">
      <command name="xml2rfc.insert" parameter="list style symbols"/>
    </button>

    <button icon="icons/orderedlist.gif" toolTip="Add numbered list">
      <command name="xml2rfc.insert" parameter="list style numbers"/>
    </button>

    <button icon="icons/list_menu.gif" toolTip="Add other list">
      <menu>
        <item command="xml2rfc.insert" label="empty"
              parameter="list style empty"/>

        <item command="xml2rfc.insert" label="letters"
              parameter="list style letters"/>

        <item command="xml2rfc.insert" label="hanging text"
              parameter="list style hanging"/>

        <!-- inserts 'empty' - arg passing problem?
        <item command="xml2rfc.insert" parameter="list style 'format ???'"
                label="custom format" />
          -->
      </menu>
    </button>

    <button icon="icons/para.gif" toolTip="Add paragraph or list item">
      <command name="xml2rfc.addBlock" parameter="t"/>
    </button>

    <separator/>

    <button icon="icons/section.gif" toolTip="Add section">
      <command name="xml2rfc.addBlock" parameter="section"/>
    </button>

    <button icon="icons/decrsectlevel.gif" toolTip="Decrease section level">
      <command name="xml2rfc.decrSectionLevel"/>
    </button>

    <button icon="icons/incrsectlevel.gif" toolTip="Increase section level">
      <command name="xml2rfc.incrSectionLevel"/>
    </button>

    <separator/>

    <button icon="icons/table.gif" toolTip="Add table">
      <command name="xml2rfc.addBlock" parameter="texttable"/>
    </button>

    <button icon="icons/figure.gif" toolTip="Add figure">
      <command name="xml2rfc.addBlock" parameter="figure"/>
    </button>

    <separator/>

    <button icon="icons/navigate2.gif" toolTip="Swap xref Ends">
      <command name="selectById" parameter="swapIdAndReference"/>
    </button>

    <button icon="icons/navigatePrevious2.gif"
            toolTip="Prev xref to same target">
      <command name="selectById" parameter="previousReference"/>
    </button>

    <button icon="icons/navigateNext2.gif" toolTip="Next xref to same target">
      <command name="selectById" parameter="nextReference"/>
    </button>

    <separator/>

    <button icon="icons/emphasis_menu.gif"
            toolTip="Convert to emphasis (spanx)">
      <menu>
        <item command="xml2rfc.convert" label="emph"
              parameter="spanx style emph"/>

        <item command="xml2rfc.convert" label="strong"
              parameter="spanx style strong"/>

        <item command="xml2rfc.convert" label="verb"
              parameter="spanx style verb"/>
      </menu>
    </button>

    <button icon="icons/plain.gif" toolTip="Convert to plain text">
      <command name="convert" parameter="[implicitElement] #text"/>
    </button>
  </toolBar>

  <!-- Templates ========================================================== -->

  <elementTemplate name="pre_postambles" selectable="true">
    <figure xmlns=""><preamble>(preamble)</preamble><artwork>artwork</artwork><postamble>(postamble)</postamble></figure>
  </elementTemplate>

  <elementTemplate name="section" selectable="override">
    <section title="new section" xmlns=""><t> </t></section>
  </elementTemplate>

  <elementTemplate name="texttable" selectable="override">
    <texttable xmlns=""><ttcol>C1</ttcol><ttcol>C2</ttcol><c>D1</c><c>D2</c></texttable>
  </elementTemplate>

  <elementTemplate name="pre_postambles" selectable="true">
    <texttable xmlns=""><preamble>(preamble)</preamble><ttcol>C1</ttcol><ttcol>C2</ttcol><c>D1</c><c>D2</c><postamble>(postamble)</postamble></texttable>
  </elementTemplate>

  <elementTemplate name="author" parent="front" selectable="override">
    <author xmlns=""><organization> </organization> <address> <postal><street>
    </street><city/><region> </region><code> </code><country>
    </country></postal> <phone> </phone> <facsimile> </facsimile> <email>
    </email> <uri> </uri> </address></author>
  </elementTemplate>

  <elementTemplate name="postal" selectable="override">
    <postal xmlns=""><street> </street><city/><region> </region><code>
    </code><country> </country></postal>
  </elementTemplate>

  <elementTemplate name="reference" selectable="override">
    <reference anchor="Anchor" xmlns=""><front><title>
    </title><author><organization> </organization></author><date/></front></reference>
  </elementTemplate>

  <elementTemplate name="vspace" selectable="override">
    <vspace blankLines="1" xmlns=""/>
  </elementTemplate>
</configuration>
<!-- To Do:
     - see css for formatting todo list
     - defaults for section (e.g., put a <t /> inside a newly-created
       section?)
  -->